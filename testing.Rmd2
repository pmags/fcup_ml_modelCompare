---
title: "R Notebook"
output: html_notebook
---
```{r}

sample2 <- replicate(2,runif(1000, min = 0, max = 10))

dataset2 <-  as_tibble(sample2) %>% 
    set_colnames(c("x1","x2"))

class_fun = function(x)(1.2 * x - 5)^2 + 2

dataset2 <- dataset2 %>% 
        mutate(
          border = purrr::map_dbl(x1, class_fun),
          g = ifelse(x2 >= abs(border), 1, 0)
        )

ggplot(dataset2, aes(x1, x2, color = factor(g))) + 
    geom_point(size = 3, shape = 1) +
    scale_x_continuous(expand = c(0, 0)) + 
    scale_y_continuous(expand = c(0, 0)) +
    theme_bw() +
    theme(
      axis.text.x=element_blank(),
      axis.ticks.x=element_blank(),
      axis.text.y=element_blank(),
      axis.ticks.y=element_blank(),
      axis.line = element_blank(),
      legend.position="bottom",
      panel.border = element_rect(colour = "black", fill=NA, size=1),
      panel.grid.minor = element_blank(),
      panel.grid.major = element_blank(),
      plot.caption.position = "plot"
    ) +
    scale_color_manual(values=c("orangered2", "navyblue"), name = "") 

x1_range = seq(0, max(dataset2$x1), by = 0.1)
x2_range = seq(0, max(dataset2$x2), by = 0.1)
grid = expand.grid(x1 = x1_range, x2 = x2_range)

# conditional probability of (x1, x2) given y = 0
px_y0 <- ifelse(grid$x2 >= (1.2 * grid$x1 - 5)^2 + 2 , 1, 0  )
# conditional probability of (x1, x2) given y = 1
px_y1 <- ifelse(grid$x2 < (1.2 * grid$x1 - 5)^2 + 2  , 1, 0  )

# Predicted class (posterior)
  py0_x         <- px_y0 * 0.5
  py1_x         <- px_y1 * (1 - 0.5)
  optimal       <- py1_x - py0_x

  predict_class <- ifelse(py0_x > py1_x, 0, 1)
  
  predict_df <- data.frame(
    py0_x         = py0_x,
    py1_x         = py1_x,
    optimal       = optimal,
    predict_class = predict_class
  )
  combine = cbind(grid,predict_df)  
  
  ggplot(dataset2, aes(x1, x2, color = factor(g))) + 
    geom_point(size = 3, shape = 1) +
    scale_x_continuous(expand = c(0, 0)) + 
    scale_y_continuous(expand = c(0, 0)) +
    theme_bw() +
    theme(
      #axis.text.x=element_blank(),
      axis.ticks.x=element_blank(),
      #axis.text.y=element_blank(),
      axis.ticks.y=element_blank(),
      axis.line = element_blank(),
      legend.position="bottom",
      panel.border = element_rect(colour = "black", fill=NA, size=1),
      panel.grid.minor = element_blank(),
      panel.grid.major = element_blank(),
      plot.caption.position = "plot"
    ) +
    scale_color_manual(values=c("orangered2", "navyblue"), name = "") +
    geom_contour(data = combine, aes(x = x1,y = x2, z = optimal), color = "black", linetype = "dashed", breaks = 0) 

```

```{r}

decision_fun <- function(x1, x2){
  res <- ifelse(x2 >= abs( (1.2 * x1 - 5)^2 + 2 ), 1, 0)
  return(res)
}

res <- dataset_gen(class_fun = decision_fun)

```


```{r}

decision_fun_linear <- function(x1, x2){
  res <- ifelse(x2 >= x1, 1, 0)
  return(res)
}

res_linear <- dataset_gen(class_fun = decision_fun_linear)


```


```{r}

decision_fun_normal <- function(x1, x2){
  
  mu <- c(6,6)
  cvar <- matrix(c(0.5,0,0,0.5), 2, 2)
  p <- mvtnorm::pmvnorm(c(x1,x2), mean = mu, sigma = cvar)
  
  res <- ifelse(p[1] >= 0.1 & p[1] <= 0.5, 1, 0)
  return(res)
}

res_normal <- dataset_gen(class_fun = decision_fun_normal)


```


```{r}


 train <- rbind(iris3[1:25,1:2,1],
                iris3[1:25,1:2,2],
                iris3[1:25,1:2,3])
 cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
 
  require(MASS)

 test <- expand.grid(x=seq(min(train[,1]-1), max(train[,1]+1),
                           by=0.1),
                     y=seq(min(train[,2]-1), max(train[,2]+1), 
                           by=0.1))
 require(class)
 classif <- knn(train, test, cl, k = 3, prob=TRUE)
 prob <- attr(classif, "prob")
 
 require(dplyr)

 dataf <- bind_rows(mutate(test,
                           prob=prob,
                           cls="c",
                           prob_cls=ifelse(classif==cls,
                                           1, 0)),
                    mutate(test,
                           prob=prob,
                           cls="v",
                           prob_cls=ifelse(classif==cls,
                                           1, 0)),
                    mutate(test,
                           prob=prob,
                           cls="s",
                           prob_cls=ifelse(classif==cls,
                                           1, 0)))
 
 require(ggplot2)
 ggplot(dataf) +
    geom_point(aes(x=x, y=y, col=cls),
               data = mutate(test, cls=classif),
               size=1.2) + 
    geom_contour(aes(x=x, y=y, z=prob_cls, group=cls, color=cls),
                 bins=2,
                 data=dataf) +
    geom_point(aes(x=x, y=y, col=cls),
               size=3,
               data=data.frame(x=train[,1], y=train[,2], cls=cl))

```



```{r}

l_mu <- list(
  "g1" = c(5,3), 
  "g2" = c(3,5)
  )

l_cvm <- list( 
  "covg1" = matrix(c(1,0,0,1),2,2),
  "covg2" = matrix(c(1,-0.4,-0.4,1),2,2)
  )

l_w <- list(
  "wg1" = 0.5, 
  "wg2" = 0.5
  )


decision <- function(x1,x2, l_mu, l_cvm){
  
  l_mu <- list(
    "g1" = c(5,3), 
    "g2" = c(3,5)
  )
  
  l_cvm <- list( 
    "covg1" = matrix(c(1,0,0,1),2,2),
    "covg2" = matrix(c(1,-0.4,-0.4,1),2,2)
  )
  
  px_0 <- dmvnorm(c(x1,x2), mean = l_mu[[1]], sigma = l_cvm[[1]]) * 0.5 
  px_1 <- dmvnorm(c(x1,x2), mean = l_mu[[2]], sigma = l_cvm[[2]]) * 0.5
  
  
  g <- case_when(
    
    px_0 > px_1 ~ 0,
    TRUE ~ 1
  )
  
  return(g)
}

dataset_gen_mvnorm(l_mu, l_cvm, l_w, class_fun = decision)


```



```{r}

l_mu_2 <- list(
  "g1" = c(5,3), 
  "g2" = c(3,5),
  "g3" = c(1,2)
  )

l_cvm_2 <- list( 
  "covg1" = matrix(c(1,0,0,1),2,2),
  "covg2" = matrix(c(1,-0.4,-0.4,1),2,2),
  "covg3" = matrix(c(1,0.2,0.2,1),2,2)
  )

l_w_2 <- list(
  "wg1" = 1/3, 
  "wg2" = 1/3,
  "wg3" = 1/3
  )


decision_2 <- function(x1,x2, l_mu, l_cvm){
  
  l_mu <- list(
    "g1" = c(5,3), 
    "g2" = c(3,5),
    "g3" = c(1,2)
  )
  
  l_cvm <- list( 
    "covg1" = matrix(c(1,0,0,1),2,2),
    "covg2" = matrix(c(1,-0.4,-0.4,1),2,2),
    "covg3" = matrix(c(1,0.2,0.2,1),2,2)
  )
  
  px_0 <- dmvnorm(c(x1,x2), mean = l_mu[[1]], sigma = l_cvm[[1]])  
  px_1 <- dmvnorm(c(x1,x2), mean = l_mu[[2]], sigma = l_cvm[[2]]) 
  px_2 <- dmvnorm(c(x1,x2), mean = l_mu[[3]], sigma = l_cvm[[3]])
  
  g <- case_when(
    
    px_0 > px_1 & px_0 > px_2 ~ 0,
    px_1 > px_0 & px_1 > px_2 ~ 1,
    px_2 > px_0 & px_2 > px_1 ~ 2,
    TRUE ~ 2
  )
  
  return(g)
}

y <- dataset_gen_mvnorm(l_mu_2, l_cvm_2, l_w_2, class_fun = decision_2, n_g = 3)




```


```{r}

cbind(rmvnorm(1000/3,c(5,3), matrix(c(1,0,0,1),2,2)),1)

c(paste0("x", 1:2),"g")

```


